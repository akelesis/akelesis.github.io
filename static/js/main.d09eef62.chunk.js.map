{"version":3,"sources":["components/header.js","components/pesquisaCep.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","PesquisaCep","props","state","cep","endereco","uf","getCEP","bind","handleChange","getLocal","transformaLocal","axios","get","this","then","res","console","log","data","setState","logradouro","bairro","localidade","navigator","geolocation","getCurrentPosition","alert","local","coords","latitude","longitude","results","formatted_address","e","target","value","type","onChange","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gTAGqBA,G,uLAEb,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,iBACX,6D,GALgBC,c,uCCCfC,E,YAEjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CAACC,IAAK,GAAIC,SAAU,GAAIC,GAAI,IAEzC,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,gBAAkB,EAAKA,gBAAgBH,KAArB,gBART,E,sEAWR,IAAD,OACLI,IAAMC,IAAN,mCAAsCC,KAAKX,MAAMC,IAAjD,UACKW,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,UAAS,SAAAjB,GACV,MAAO,CACHE,SAAS,GAAD,OAAKW,EAAIG,KAAKE,WAAd,qBAAqCL,EAAIG,KAAKG,OAA9C,aAAyDN,EAAIG,KAAKI,WAAlE,cAAkFP,EAAIG,KAAKb,GAA3F,aAAkGU,EAAIG,KAAKf,IAA3G,qB,iCAOrBoB,UAAUC,YACTD,UAAUC,YAAYC,mBAAmBZ,KAAKH,iBAG9CgB,MAAM,kE,sCAIEC,GAAO,IAAD,OAClBhB,IAAMC,IAAN,mEAAsEe,EAAMC,OAAOC,SAAnF,YAA+FF,EAAMC,OAAOE,UAA5G,iDACKhB,MAAK,SAAAC,GACF,EAAKI,UAAS,SAAAjB,GACV,MAAM,CAACE,SAAUW,EAAIG,KAAKa,QAAQ,GAAGC,2B,mCAMxCC,GACTpB,KAAKM,SAAL,eAAmBN,KAAKX,MAAxB,CAA+BC,IAAK8B,EAAEC,OAAOC,W,+BAG7C,OACI,yBAAKrC,UAAU,aACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,gBACX,2BAAOA,UAAU,kBAAjB,kBACA,2BAAOsC,KAAK,OAAOtC,UAAU,MAAMuC,SAAUxB,KAAKL,aAAc2B,MAAOtB,KAAKX,MAAMC,MAClF,4BAAQL,UAAU,YAAYwC,QAASzB,KAAKP,QAA5C,cAEJ,yBAAKR,UAAU,mBACX,mCAEJ,yBAAKA,UAAU,kBACX,4BAAQA,UAAU,eAAewC,QAASzB,KAAKJ,UAA/C,8BAA8E,uBAAGX,UAAU,6BAG/F,6BACJ,yBAAKA,UAAU,aACX,2BAAIe,KAAKX,MAAME,gB,GAjEML,aCU1BwC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.d09eef62.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './header.css'\r\n\r\nexport default class Header extends Component{\r\n    render(){\r\n        return(\r\n            <header className=\"cep-header\">\r\n                <div className=\"logo-settings\">\r\n                    <h3>PESQUISA DE ENDEREÇO</h3>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport './pesquisaCep.css'\r\nimport axios from 'axios'\r\n\r\nexport default class PesquisaCep extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {cep: '', endereco: '', uf: ''}\r\n\r\n        this.getCEP = this.getCEP.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.getLocal = this.getLocal.bind(this)\r\n        this.transformaLocal = this.transformaLocal.bind(this)\r\n    }\r\n\r\n    getCEP() {\r\n        axios.get(`https://viacep.com.br/ws/${this.state.cep}/json`)\r\n            .then(res => {\r\n                console.log(res.data)\r\n                this.setState(state => {\r\n                    return {\r\n                        endereco: `${res.data.logradouro} - Bairro ${res.data.bairro}, ${res.data.localidade} - ${res.data.uf}, ${res.data.cep}, Brasil`,\r\n                    }\r\n                })\r\n            })\r\n    }\r\n\r\n    getLocal(){\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(this.transformaLocal)\r\n        }\r\n        else{\r\n            alert('Este navegador não tem suporte para geolocalização!')\r\n        }\r\n    }\r\n\r\n    transformaLocal(local){\r\n        axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${local.coords.latitude},${local.coords.longitude}&key=AIzaSyBUzTymXXri50Wo62RLkwfRBT-EYDy6x3g`)\r\n            .then(res => {\r\n                this.setState(state => {\r\n                    return{endereco: res.data.results[0].formatted_address}\r\n                })\r\n                \r\n            })\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ ...this.state, cep: e.target.value })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"principal\">\r\n                <div className=\"pesquisa\">\r\n                    <div className=\"pesquisa-cep\">\r\n                        <label className=\"pesquisa-label\">Insira o CEP: </label>\r\n                        <input type=\"text\" className=\"cep\" onChange={this.handleChange} value={this.state.cep} />\r\n                        <button className=\"botao-cep\" onClick={this.getCEP}>Pesquisar</button>\r\n                    </div>\r\n                    <div className=\"texto-separador\">\r\n                        <h3>OU</h3>\r\n                    </div>\r\n                    <div className=\"pesquisa-local\">\r\n                        <button className=\"btn-pesquisa\" onClick={this.getLocal}>Capturar Localização <i className=\"fas fa-map-marker-alt\"></i></button>\r\n                    </div>\r\n                </div>\r\n                    <hr />\r\n                <div className=\"resultado\">\r\n                    <p>{this.state.endereco}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/header'\r\nimport PesquisaCep from './components/pesquisaCep'\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <PesquisaCep />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}